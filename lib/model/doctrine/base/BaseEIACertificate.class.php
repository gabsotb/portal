<?php

/**
 * BaseEIACertificate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $serial_number
 * @property integer $eireport_id
 * @property string $token
 * @property EIReport $EIReport
 * 
 * @method integer        getSerialNumber()  Returns the current record's "serial_number" value
 * @method integer        getEireportId()    Returns the current record's "eireport_id" value
 * @method string         getToken()         Returns the current record's "token" value
 * @method EIReport       getEIReport()      Returns the current record's "EIReport" value
 * @method EIACertificate setSerialNumber()  Sets the current record's "serial_number" value
 * @method EIACertificate setEireportId()    Sets the current record's "eireport_id" value
 * @method EIACertificate setToken()         Sets the current record's "token" value
 * @method EIACertificate setEIReport()      Sets the current record's "EIReport" value
 * 
 * @package    rdbeportal
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEIACertificate extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('e_i_a_certificate');
        $this->hasColumn('serial_number', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'unique' => true,
             ));
        $this->hasColumn('eireport_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'unique' => true,
             ));
        $this->hasColumn('token', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('EIReport', array(
             'local' => 'eireport_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}