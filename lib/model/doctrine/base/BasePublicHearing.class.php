<?php

/**
 * BasePublicHearing
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $company_id
 * @property string $report
 * @property EIApplication $EIApplication
 * 
 * @method integer       getCompanyId()     Returns the current record's "company_id" value
 * @method string        getReport()        Returns the current record's "report" value
 * @method EIApplication getEIApplication() Returns the current record's "EIApplication" value
 * @method PublicHearing setCompanyId()     Sets the current record's "company_id" value
 * @method PublicHearing setReport()        Sets the current record's "report" value
 * @method PublicHearing setEIApplication() Sets the current record's "EIApplication" value
 * 
 * @package    rdbeportal
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePublicHearing extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('public_hearing');
        $this->hasColumn('company_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('report', 'string', 800, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 800,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('EIApplication', array(
             'local' => 'company_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $signable0 = new Doctrine_Template_Signable(array(
             'created:{ name' => 'created_by,type: string,onUpdate: CASCADE,onDelete: SET NULL,options: {notnull: true,default: None}}',
             'updated' => 
             array(
              'name' => 'updated_by',
              'type' => 'string',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
    }
}