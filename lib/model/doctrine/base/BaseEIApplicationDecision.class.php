<?php

/**
 * BaseEIApplicationDecision
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $eireport_id
 * @property string $status
 * @property string $comments
 * @property EIReport $EIReport
 * 
 * @method integer               getEireportId()  Returns the current record's "eireport_id" value
 * @method string                getStatus()      Returns the current record's "status" value
 * @method string                getComments()    Returns the current record's "comments" value
 * @method EIReport              getEIReport()    Returns the current record's "EIReport" value
 * @method EIApplicationDecision setEireportId()  Sets the current record's "eireport_id" value
 * @method EIApplicationDecision setStatus()      Sets the current record's "status" value
 * @method EIApplicationDecision setComments()    Sets the current record's "comments" value
 * @method EIApplicationDecision setEIReport()    Sets the current record's "EIReport" value
 * 
 * @package    rdbeportal
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEIApplicationDecision extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('e_i_application_decision');
        $this->hasColumn('eireport_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('status', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('comments', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('EIReport', array(
             'local' => 'eireport_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $signable0 = new Doctrine_Template_Signable(array(
             'created:{ name' => 'created_by,type: string,onUpdate: CASCADE,onDelete: SET NULL,options: {notnull: true,default: None}}',
             'updated' => 
             array(
              'name' => 'updated_by',
              'type' => 'string',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
    }
}