<?php

/**
 * TaskAssignmentTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TaskAssignmentTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TaskAssignmentTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TaskAssignment');
    }
	//this method retrieves the user assigned jobs i.e. jobs for the current user
	public function getUserTasks($userId)
	{
	 $query = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT  task_assignment.investmentapp_id,
	 task_assignment.instructions,task_assignment.work_status,
	 task_assignment.duedate, investment_application.name FROM task_assignment LEFT JOIN investment_application ON 
	 task_assignment.investmentapp_id = investment_application.id WHERE task_assignment.user_assigned ='$userId' AND 
	 task_assignment.work_status = 'notstarted'
	 ") ;
	 return $query;
	}
	//Get Tasks of this user who's status is not complete
	public function getUserTasksNotComplete($userId)
	{
	 $query = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT task_assignment.investmentapp_id,
	 task_assignment.instructions,task_assignment.work_status,
	 task_assignment.duedate, investment_application.name, investment_application.company_address FROM task_assignment LEFT JOIN investment_application ON 
	 task_assignment.investmentapp_id = investment_application.id WHERE task_assignment.user_assigned ='$userId' AND 
	 task_assignment.work_status != 'complete' AND task_assignment.work_status != 'notstarted'
	 ") ;
	 return $query;
	}
	//get all application details for Investment Certificate for a given user
	public function getApplicationDetails($id)
	{
	  $query = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT investment_application.id, investment_application.name,
	  investment_application.job_created,investment_application.job_category,investment_application.application_letter,investment_application.incorporation_certificate,
	  investment_application.shareholding_list,investment_application.company_legal_nature,investment_application.company_representative,
	  business_plan.executive_summary,business_plan.promoter_profile,business_plan.project_background,business_plan.equity_financing,business_plan.income_statement,
	  business_plan.cashflow_statement,business_plan.payback_period,business_plan.npv,business_plan.loan_amortization,business_plan.implementation_plan,
	  business_plan.notes,
	  task_assignment.investmentapp_id
	  FROM task_assignment LEFT JOIN investment_application ON task_assignment.investmentapp_id = investment_application.id
	  LEFT JOIN business_plan ON business_plan.investment_id = task_assignment.investmentapp_id WHERE task_assignment.investmentapp_id = '$id'
	  ") ;
	  //
	  //we also need to change the status of business application 
	  //Task should be started and the investor should see processing and detailed comment
	  //set variables to make function reusable 
	  //Now here we call the 3 functions in the BusinessApplicationStatus Table to update status ,comment and progress bar
	  /*Values to Set*/
	  $value1 = "processing";
	  $value2 = "The RDB Staff is now process and validating you application. 
	  Please wait. Thankyou";
	  $value3 = 50;
	  $this->updateBusinessApplicationStatus($id,$value1,$value2,$value3);
	  $this->updateTaskStatus($id);
	  return $query;
	  
	}
	//update tasks status on this table for this user i.e. logged in user
	public function updateTaskStatus($taskId)
	{
	 $value = "started";
	 //
      $q = Doctrine_Query::create()
	 ->UPDATE('TaskAssignment')
	 ->SET('work_status', '?' , $value)
	 ->WHERE('investmentapp_id = ?', $taskId);
	 $q->execute();
	}
	//this function updates the status of work to reporting i.e. report generation status
	//within this method we will also update status of BusinessApplicationStatus table for the user to analyze
	public function updateUserTaskStatus($taskId)
	{
	 $work_status = "reporting" ;
	  $q = Doctrine_Query::create()
	 ->UPDATE('TaskAssignment')
	 ->SET('work_status', '?' , $work_status)
	 ->WHERE('investmentapp_id = ?', $taskId);
	 $q->execute();
	 ///call methods for BusinessApplicationStatus update
	 //set variables
	  $value1 = "reporting";
	  $value2 = "The RDB Staff is now analyzing and generating a business proposal summary report. 
	  Please wait for acceptance of your application. Thankyou";
	  $value3 = 70;
	 $this->updateBusinessApplicationStatus($taskId,$value1,$value2,$value3);
	}
	//called after sending an email to the user
	public function updateUserTaskStatus2($taskId)
	{
	 $work_status = "awaitingpayment" ;
	  $q = Doctrine_Query::create()
	 ->UPDATE('TaskAssignment')
	 ->SET('work_status', '?' , $work_status)
	 ->WHERE('investmentapp_id = ?', $taskId);
	 $q->execute();
	 ///call methods for BusinessApplicationStatus update
	 //set variables
	  $value1 = "accepted";
	  $value2 = "Your Application for Investment Certificate has been accepted.
	  An email with further instruction for payment has been sent to your accout email. Thankyou";
	  $value3 = 80;
	 $this->updateBusinessApplicationStatus($taskId,$value1,$value2,$value3);
	}
	//update business application status for the user to see that the task has been started
	public function updateBusinessApplicationStatus($id,$value1,$value2,$value3)
	{
	  
	  $q1 = Doctrine_Core::getTable('BusinessApplicationStatus')->updateStatus($id,$value1);
	  $q2 = Doctrine_Core::getTable('BusinessApplicationStatus')->updateComment($id,$value2 );
	  $q3 = Doctrine_Core::getTable('BusinessApplicationStatus')->updateValue($id,$value3);
	  
	}
	//the third part comes after confirmation of payment
	public function updateUserTaskStatus3($taskId)
	{
	 $work_status = "paymentconfirmed" ;
	  $q = Doctrine_Query::create()
	 ->UPDATE('TaskAssignment')
	 ->SET('work_status', '?' , $work_status)
	 ->WHERE('investmentapp_id = ?', $taskId);
	 $q->execute();
	 ///call methods for BusinessApplicationStatus update
	 //set variables
	  $value1 = "paymentconfirmed";
	  $value2 = "Your Payment for Administrative Fee has been confirmed. Please wait for your Certificate of
    investment Thankyou";
	  $value3 = 90;
	 $this->updateBusinessApplicationStatus($taskId,$value1,$value2,$value3);
	}
	//the final part is after issuing of certificate.
	public function updateUserTaskStatus4($taskId)
	{
	   $work_status = "complete" ;
	  $q = Doctrine_Query::create()
		 ->UPDATE('TaskAssignment')
		 ->SET('work_status', '?' , $work_status)
		 ->WHERE('investmentapp_id = ?', $taskId);
		 $q->execute();
	}
	//this method is called after successful confirmation of payment. parameter passed is name of business
	public function updatingPaymentStatus($businesName)
	{
	  $query =  Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
	   SELECT task_assignment.id, task_assignment.investmentapp_id FROM task_assignment
	   LEFT JOIN investment_application ON task_assignment.investmentapp_id = investment_application.id
	   WHERE investment_application.name = '$businesName'
	  ");
	  //
	  return $query;
	}
	/*
	Before we issue a Certificate, we will confirm the status of payment
	*/
	public function getStatus($id)
	{
	 $query =  Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
	   SELECT task_assignment.work_status FROM task_assignment
	   LEFT JOIN investment_application ON task_assignment.investmentapp_id = investment_application.id
	   WHERE investment_application.id = '$id'
	  ");
	  //
	  return $query;
	}
	
}